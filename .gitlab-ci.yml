variables:
  SONAR_HOST_URL: "${SONAR_HOST_URL}"
  SONAR_TOKEN: "${SONAR_TOKEN}"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  PROJECT_KEY: "${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}"
  GIT_DEPTH: "0"
  IMAGE: "${REGISTRY}${CI_PROJECT_PATH}"
  IMAGEIO: "${REGISTRY_IO}${CI_PROJECT_PATH}"
  SERVICE_NAME: "${CI_SERVICE_NAME}"
  IMAGE_TAG: ""
  RELEASE: ""
  SERVICE_PORT: 3000
  CONN_USER: ${TEST_DB_USER}
  CONN_PASSWORD: ${TEST_DB_PASSWORD}
  CONN_HOST: ${TEST_DB_HOST}
  CONN_DATABASE: ${TEST_DB_NAME}
  CONN_PORT: ${TEST_DB_PORT}

stages:
  - build-docker
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/*
    - node_modules
    - .sonar/cache
    - .npm

before_script:
  - export
  - if [ "$CI_COMMIT_REF_NAME" != "master" ]; then NAMESPACE="${NAMESPACE}-${CI_COMMIT_REF_NAME}"; fi
  - if [ "$CI_COMMIT_REF_NAME" = "master" ]; then IMAGE_TAG="master"; fi
  - if [ "$CI_COMMIT_REF_NAME" = "qa" ]; then IMAGE_TAG="stable"; fi
  - if [ "$CI_COMMIT_REF_NAME" = "dev" ]; then IMAGE_TAG="latest"; fi

build-docker:
  image: docker:latest
  stage: build-docker
  variables:
    NAMESPACE: ""
    ENVIRONMENT: ""
  tags:
    - ec2
    - local
  before_script:
    - if [ "$CI_COMMIT_REF_NAME" != "master" ]; then ENVIRONMENT="${CI_COMMIT_REF_NAME}-"; fi
    - if [ "$CI_COMMIT_REF_NAME" = "master" ]; then IMAGE_TAG="master"; fi
    - if [ "$CI_COMMIT_REF_NAME" = "qa" ]; then IMAGE_TAG="stable"; fi
    - if [ "$CI_COMMIT_REF_NAME" = "dev" ]; then IMAGE_TAG="latest"; fi
    - export
  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_USER}" "${CI_REGISTRY}"
    - cat server.conf
    - docker build -t ${IMAGE}:${IMAGE_TAG}.${CI_COMMIT_SHORT_SHA} . --build-arg API_URL=https://${ENVIRONMENT}api.g-global.com/tms/v2 --build-arg IMAGE_VERSION="${IMAGE_TAG}.${CI_COMMIT_SHORT_SHA}"
    - docker push ${IMAGE}:${IMAGE_TAG}.${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - coverage/
  allow_failure: false
  only:
    refs:
      - master
      - qa
      - dev
      - tags


deploy k8s:
  image: alpine/k8s:1.19.15
  stage: deploy
  tags:
    - kubernetes
    - cluster
  before_script:
    - mkdir ~/.kube/
    - echo $KUBE_CONFIG_AWS | base64 -d > config
    - mv config ~/.kube/
    - if [ "$CI_COMMIT_REF_NAME" != "master" ]; then NAMESPACE="${NAMESPACE}-${CI_COMMIT_REF_NAME}"; fi
    - if [ "$CI_COMMIT_REF_NAME" = "master" ]; then IMAGE_TAG="master"; fi
    - if [ "$CI_COMMIT_REF_NAME" = "qa" ]; then IMAGE_TAG="stable"; fi
    - if [ "$CI_COMMIT_REF_NAME" = "dev" ]; then IMAGE_TAG="latest"; fi
  script:
    - sed -i "s,<SERVICE_NAME>,${SERVICE_NAME},g" .k8s/deployment.yml
    - sed -i "s,<NAMESPACE>,${NAMESPACE},g" .k8s/deployment.yml
    - sed -i "s,<SERVICE_ENV>,${SERVICE_ENV},g" .k8s/deployment.yml
    - sed -i "s,<IMAGE>,${IMAGE}:${IMAGE_TAG}.${CI_COMMIT_SHORT_SHA},g" .k8s/deployment.yml
    - cat .k8s/deployment.yml
    - kubectl apply -f .k8s/deployment.yml
  only:
    refs:
      - master
      - qa
      - dev
